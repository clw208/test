{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "You pressed something!\n"
     ]
    }
   ],
   "source": [
    "##simple GUI\n",
    "\"\"\"\n",
    "Very simple GUI example with Tkinter\n",
    "\n",
    "Author: Abdikaiym Zhiyenbek\n",
    "\"\"\"\n",
    "\n",
    "## --------------------------------------------------------------------------------------------------------------------\n",
    "# Import packages and modules:\n",
    "# ---------------------------------------------------------------------------------------------------------------------\n",
    "# import packages:\n",
    "from tkinter import *\n",
    "from tkinter import ttk\n",
    "\n",
    "## --------------------------------------------------------------------------------------------------------------------\n",
    "# Start the GUI\n",
    "# ---------------------------------------------------------------------------------------------------------------------\n",
    "class SimpleGUI:\n",
    "    def __init__(self, start_window):\n",
    "\n",
    "        ## ------------------------------------------------------------------------------------------------------------\n",
    "        # Start window\n",
    "        # -------------------------------------------------------------------------------------------------------------\n",
    "        self.start_window = start_window\n",
    "        start_window.title('Very Simple GUI')\n",
    "        # master.resizable(False, False)\n",
    "\n",
    "        # # Logo:\n",
    "        sse_logo = 'C:\\\\Users\\\\Walker\\\\Documents\\\\Python\\\\ESD_Logo.png'\n",
    "        originalSSEImage = PhotoImage(file=sse_logo)\n",
    "        displaySSEImage = originalSSEImage.subsample(2, 2)\n",
    "        self.sse_logo = displaySSEImage\n",
    "\n",
    "        ttk.Label(start_window, text='Version 1.0').grid(row=0, column=0, sticky='w', padx=10,\n",
    "                                                         pady=(10, 0))\n",
    "\n",
    "        ttk.Label(start_window, image=self.sse_logo).grid(row=3, column=0, padx=10, pady=10, columnspan=2)\n",
    "\n",
    "        ttk.Label(start_window, text='Chair of Ecological Systems Design (ESD)').grid(row=4, column=0, sticky='w',\n",
    "                                                                                      padx=(20, 0), pady=0)\n",
    "        ttk.Label(start_window, text=u\"\\N{COPYRIGHT SIGN}\" ' 2017 ETH Zurich').grid(row=5, column=0, sticky='w',\n",
    "                                                                                    padx=(20, 0), pady=0)\n",
    "\n",
    "        ttk.Button(start_window, text='Exit', command=self.exit_start_window).grid(row=5, column=1, padx=50, pady=10,\n",
    "                                                                                   sticky='e')\n",
    "\n",
    "        ## ------------------------------------------------------------------------------------------------------------\n",
    "        # About window:\n",
    "        # -------------------------------------------------------------------------------------------------------------\n",
    "        ttk.Button(start_window, text='About', command=self.about).grid(row=2, column=0, sticky='w', padx=10,\n",
    "                                                                        pady=(0, 10))\n",
    "\n",
    "        ## ------------------------------------------------------------------------------------------------------------\n",
    "        # Main Menu:\n",
    "        # -------------------------------------------------------------------------------------------------------------\n",
    "        # initiate main menu variables:\n",
    "        self.main_window = None\n",
    "        self.notebook_main_window = None\n",
    "        self.first_tab_frame = None\n",
    "        self.second_tab_frame = None\n",
    "\n",
    "        self.frame_1_tab_1 = None\n",
    "        self.frame_2_tab_1 = None\n",
    "        self.frame_3_tab_1 = None\n",
    "        self.frame_4_tab_1 = None\n",
    "        self.frame_5_tab_1 = None\n",
    "        self.frame_1_tab_2 = None\n",
    "        self.frame_2_tab_2 = None\n",
    "        self.frame_3_tab_2 = None\n",
    "        self.frame_4_tab_2 = None\n",
    "        self.frame_5_tab_2 = None\n",
    "\n",
    "        self.scenario_window = None\n",
    "        self.scenario_window_frame = None\n",
    "        self.number_of_scen = None\n",
    "        self.scenario_number = None\n",
    "\n",
    "        self.impact_method_var1 = None\n",
    "        self.impact_method_combobox_label_1 = None\n",
    "        self.impact_method_combobox_1 = None\n",
    "        self.impact_method_var2 = None\n",
    "        self.impact_method_combobox_label_2 = None\n",
    "        self.impact_method_combobox_2 = None\n",
    "\n",
    "        self.some_entry_var = None\n",
    "        self.some_entry_label = None\n",
    "        self.some_entry = None\n",
    "        self.turn_on_combobox_var = None\n",
    "        self.turn_on_combobox_label = None\n",
    "        self.turn_on_combobox = None\n",
    "        self.second_combobox_var = None\n",
    "        self.second_combobox_label = None\n",
    "        self.second_combobox = None\n",
    "        self.third_combobox_var = None\n",
    "        self.third_combobox_label = None\n",
    "        self.third_combobox = None\n",
    "        self.number_of_scenarios = None\n",
    "        self.number_of_scenarios_label = None\n",
    "        self.new_window = None\n",
    "        self.new_window_frame = None\n",
    "\n",
    "        def main_menu_functions():\n",
    "            self.main_menu()\n",
    "            self.add_menu_line()\n",
    "\n",
    "        ttk.Button(start_window, text='Start', command=main_menu_functions).grid(row=4, column=1, padx=50, pady=5,\n",
    "                                                                                 sticky='e')\n",
    "\n",
    "    ## ----------------------------------------------------------------------------------------------------------------\n",
    "    # (2) About window\n",
    "    # -----------------------------------------------------------------------------------------------------------------\n",
    "    def about(self):\n",
    "        about_window = Toplevel(self.start_window)\n",
    "        about_window.title('About')\n",
    "        about_window.lift(self.start_window)\n",
    "\n",
    "        notebook_about_window = ttk.Notebook(about_window)\n",
    "        notebook_about_window.pack()\n",
    "        #\n",
    "        frame_about_1 = ttk.Frame(notebook_about_window)\n",
    "        frame_about_2 = ttk.Frame(notebook_about_window)\n",
    "\n",
    "        notebook_about_window.add(frame_about_1, text='About')\n",
    "        notebook_about_window.add(frame_about_2, text='Author')\n",
    "\n",
    "\n",
    "        frame_about_1.config(height=200, width=300)\n",
    "        frame_about_2.config(height=200, width=300)\n",
    "\n",
    "\n",
    "        def close_about():\n",
    "            about_window.destroy()\n",
    "\n",
    "        # Frame 1:\n",
    "        ttk.Label(frame_about_1, wraplength=300,\n",
    "                  text='Very simple GUI'\n",
    "\n",
    "                  ).grid(row=0, column=0, sticky='w', padx=(5, 5), pady=(10, 10))\n",
    "        ttk.Label(frame_about_1, text=u\"\\N{COPYRIGHT SIGN}\" ' 2017 ETH Zurich').grid(row=1, column=0, sticky='w',\n",
    "                                                                                     padx=(5, 5),\n",
    "                                                                                     pady=(10, 10))\n",
    "        # Frame 2:\n",
    "        ttk.Label(frame_about_2, wraplength=300, text='\\nEmail: someone@ifu.baug.ethz.ch'\n",
    "                  ).grid(row=0, column=0, sticky='w', padx=(5, 5), pady=(10, 10))\n",
    "\n",
    "        ttk.Button(frame_about_1, text='Close', command=close_about).grid(row=7, column=0, padx=(10, 20), pady=(20, 20)\n",
    "                                                                          , sticky='e')\n",
    "\n",
    "    ## ----------------------------------------------------------------------------------------------------------------\n",
    "    # Close windows\n",
    "    # -----------------------------------------------------------------------------------------------------------------\n",
    "    def exit_start_window(self):\n",
    "        self.start_window.destroy()\n",
    "\n",
    "    def close_main_menu(self):\n",
    "        self.main_window.destroy()\n",
    "\n",
    "    def close_new_window(self):\n",
    "        self.new_window.destroy()\n",
    "\n",
    "    ## ----------------------------------------------------------------------------------------------------------------\n",
    "    # (3) Main menu window\n",
    "    # -----------------------------------------------------------------------------------------------------------------\n",
    "    def main_menu(self):\n",
    "        self.main_window = Toplevel(self.start_window)\n",
    "        self.main_window.title('Main menu')\n",
    "        self.main_window.lift(self.start_window)\n",
    "        # main_window.state('zoomed')  # full screen\n",
    "\n",
    "        # to make sure other copies of the window not to open:\n",
    "        self.main_window.focus_set()  # sets the focus to the main menu window\n",
    "        self.main_window.grab_set()  # prohibits any other window to accept events\n",
    "\n",
    "        # -------------------------------------------------------------------------------------------------------------\n",
    "        # tabs:\n",
    "        # -------------------------------------------------------------------------------------------------------------\n",
    "        self.notebook_main_window = ttk.Notebook(self.main_window)\n",
    "        self.notebook_main_window.pack()\n",
    "\n",
    "        # parent frames:\n",
    "        self.first_tab_frame = ttk.Frame(self.notebook_main_window)\n",
    "        self.first_tab_frame.grid(row=0, column=0, sticky=W)\n",
    "\n",
    "        self.second_tab_frame = ttk.Frame(self.notebook_main_window)\n",
    "        self.second_tab_frame.grid(row=0, column=0, sticky=W)\n",
    "        self.notebook_main_window.add(self.first_tab_frame, text='First tab')\n",
    "        self.notebook_main_window.add(self.second_tab_frame, text='Second tab')\n",
    "\n",
    "        # -------------------------------------------------------------------------------------------------------------\n",
    "        # first tab:\n",
    "        # -------------------------------------------------------------------------------------------------------------\n",
    "        self.frame_1_tab_1 = ttk.LabelFrame(self.first_tab_frame, height=60, width=700,\n",
    "                                                    text='Some frame name')\n",
    "        self.frame_1_tab_1.grid(row=0, column=0, padx=10, pady=10)\n",
    "        self.frame_1_tab_1.grid_propagate(False)\n",
    "\n",
    "        self.frame_2_tab_1 = ttk.LabelFrame(self.first_tab_frame, height=130, width=700,\n",
    "                                                       text='Some frame name')\n",
    "        self.frame_2_tab_1.grid(row=1, column=0, padx=10, pady=10)\n",
    "        self.frame_2_tab_1.grid_propagate(False)\n",
    "\n",
    "        self.frame_3_tab_1 = ttk.LabelFrame(self.first_tab_frame, height=50, width=700,\n",
    "                                                    text='Some frame name')\n",
    "        self.frame_3_tab_1.grid(row=2, column=0, padx=10, pady=10)\n",
    "        self.frame_3_tab_1.grid_propagate(False)\n",
    "\n",
    "        self.frame_4_tab_1 = ttk.LabelFrame(self.first_tab_frame, height=80, width=450,\n",
    "                                                    text='Some frame name')\n",
    "        self.frame_4_tab_1.grid(row=3, column=0, padx=10, pady=10, sticky=W)\n",
    "        self.frame_4_tab_1.grid_propagate(False)\n",
    "\n",
    "        self.frame_5_tab_1 = ttk.LabelFrame(self.first_tab_frame, height=80, width=200)\n",
    "        self.frame_5_tab_1.grid(row=3, column=0, padx=10, pady=10, sticky=E)\n",
    "        self.frame_5_tab_1.grid_propagate(False)\n",
    "\n",
    "        # Cancel button:\n",
    "        ttk.Button(self.frame_5_tab_1, text='Cancel', command=self.close_main_menu).grid(row=3,\n",
    "                                                                                                  column=0, padx=60,\n",
    "                                                                                                  pady=15)\n",
    "\n",
    "        # -------------------------------------------------------------------------------------------------------------\n",
    "        # second tab:\n",
    "        # -------------------------------------------------------------------------------------------------------------\n",
    "        self.frame_1_tab_2 = ttk.LabelFrame(self.second_tab_frame, height=60, width=700,\n",
    "                                                    text='Some frame name')\n",
    "        self.frame_1_tab_2.grid(row=0, column=0, padx=10, pady=10)\n",
    "        self.frame_1_tab_2.grid_propagate(False)\n",
    "\n",
    "        self.frame_2_tab_2 = ttk.LabelFrame(self.second_tab_frame, height=130, width=700,\n",
    "                                                       text='Some frame name')\n",
    "        self.frame_2_tab_2.grid(row=1, column=0, padx=10, pady=10)\n",
    "        self.frame_2_tab_2.grid_propagate(False)\n",
    "\n",
    "        self.frame_3_tab_2 = ttk.LabelFrame(self.second_tab_frame, height=50, width=700,\n",
    "                                                    text='Some frame name')\n",
    "        self.frame_3_tab_2.grid(row=2, column=0, padx=10, pady=10)\n",
    "        self.frame_3_tab_2.grid_propagate(False)\n",
    "\n",
    "        self.frame_4_tab_2 = ttk.LabelFrame(self.second_tab_frame, height=80, width=450,\n",
    "                                                    text='Some frame name')\n",
    "        self.frame_4_tab_2.grid(row=3, column=0, padx=10, pady=10, sticky=W)\n",
    "        self.frame_4_tab_2.grid_propagate(False)\n",
    "\n",
    "        self.frame_5_tab_2 = ttk.LabelFrame(self.second_tab_frame, height=80, width=200)\n",
    "        self.frame_5_tab_2.grid(row=3, column=0, padx=10, pady=10, sticky=E)\n",
    "        self.frame_5_tab_2.grid_propagate(False)\n",
    "\n",
    "        ttk.Button(self.frame_5_tab_2, text='Cancel', command=self.close_main_menu).grid(row=3,\n",
    "                                                                                                  column=0, padx=60,\n",
    "                                                                                                  pady=15)\n",
    "\n",
    "        #\n",
    "        some_selection = StringVar()\n",
    "\n",
    "        ttk.Radiobutton(self.frame_1_tab_1, text='Radio button', variable=some_selection,\n",
    "                        value='Radiobutton', command=self.new_window).grid(row=0, column=0, padx=(20, 20),\n",
    "                                                   pady=10, sticky='w')\n",
    "\n",
    "        ttk.Radiobutton(self.frame_1_tab_2, text='Radio button', variable=some_selection,\n",
    "                        value='Radiobutton', command=self.new_window).grid(row=0, column=0, padx=(20, 20),\n",
    "                                                   pady=10, sticky='w')\n",
    "\n",
    "\n",
    "        # impact method combo box:\n",
    "        self.impact_method_var1 = StringVar()\n",
    "        self.impact_method_combobox_label_1 = ttk.Label(self.frame_3_tab_1, text=\"Select bla bla bla combobox\")\n",
    "        self.impact_method_combobox_1 = ttk.Combobox(self.frame_3_tab_1, textvariable=self.impact_method_var1)\n",
    "        self.impact_method_combobox_1.grid(row=0, column=1, padx=(5, 0), pady=(5, 5), sticky=W)\n",
    "        self.impact_method_combobox_label_1.grid(row=0, column=0, padx=(5, 0), pady=(5, 5), sticky=W)\n",
    "        self.impact_method_combobox_1.config(values=('', 'bla bla bla', ' a lot of bla bla bla'))\n",
    "\n",
    "        self.impact_method_var2 = StringVar()\n",
    "        self.impact_method_combobox_label_2 = ttk.Label(self.frame_3_tab_2, text=\"Select bla bla bla combobox\")\n",
    "        self.impact_method_combobox_2 = ttk.Combobox(self.frame_3_tab_2, textvariable=self.impact_method_var2)\n",
    "        self.impact_method_combobox_2.grid(row=0, column=1, padx=(5, 0), pady=(5, 5), sticky=W)\n",
    "        self.impact_method_combobox_label_2.grid(row=0, column=0, padx=(5, 0), pady=(5, 5), sticky=W)\n",
    "        self.impact_method_combobox_2.config(values=('', 'bla bla bla', ' a lot of bla bla bla'))\n",
    "        # -------------------------------------------------------------------------------------------------------------\n",
    "        # Select and enter input data:\n",
    "        # -------------------------------------------------------------------------------------------------------------\n",
    "\n",
    "        # some entry (1):\n",
    "        self.some_entry_var = StringVar()\n",
    "        self.some_entry_label = ttk.Label(self.frame_2_tab_1, text=\"Bla bla bla Entry\")\n",
    "        self.some_entry= ttk.Entry(self.frame_2_tab_1, textvariable=self.some_entry_var)\n",
    "        self.some_entry_label.pack()\n",
    "        self.some_entry.pack()\n",
    "        self.some_entry_label.grid(row=0, column=0, padx=(5, 0), pady=(5, 5), sticky=W)\n",
    "        self.some_entry.grid(row=0, column=1, padx=(5, 0), pady=(5, 5), sticky=W)\n",
    "\n",
    "\n",
    "        # Greenhouse heating combo box:\n",
    "        self.turn_on_combobox_var = StringVar()\n",
    "        self.turn_on_combobox_label = ttk.Label(self.frame_2_tab_1, text=\"Turn on/off combobox\")\n",
    "        self.turn_on_combobox = ttk.Combobox(self.frame_2_tab_1,\n",
    "                                                        textvariable='Turn on/off combobox')\n",
    "        self.turn_on_combobox.grid(row=3, column=1, padx=(5, 0), pady=(5, 5), sticky=W)\n",
    "        self.turn_on_combobox_label.grid(row=3, column=0, padx=(5, 0), pady=(5, 5), sticky=W)\n",
    "        self.turn_on_combobox.config(values=('', 'Yes', 'No'))\n",
    "\n",
    "        def enable_comboboxes(event):\n",
    "            if self.turn_on_combobox.get() == \"Yes\":\n",
    "                self.second_combobox.configure(state=\"enabled\")\n",
    "                self.third_combobox.configure(state=\"enabled\")\n",
    "            else:\n",
    "                self.second_combobox.configure(state=\"disabled\")\n",
    "                self.third_combobox.configure(state=\"disabled\")\n",
    "\n",
    "        self.turn_on_combobox.bind(\"<<ComboboxSelected>>\", enable_comboboxes)\n",
    "\n",
    "        # some other comboboxes:\n",
    "        self.second_combobox_var = StringVar()\n",
    "        self.second_combobox_label = ttk.Label(self.frame_2_tab_1, text=\"month names\")\n",
    "        self.second_combobox = ttk.Combobox(self.frame_2_tab_1, textvariable=\"month names\")\n",
    "        self.second_combobox.grid(row=3, column=3, padx=(5, 0), pady=(5, 5), sticky=E)\n",
    "        self.second_combobox_label.grid(row=3, column=2, padx=(100, 0), pady=(5, 5), sticky=E)\n",
    "        self.second_combobox.config(values=('', 'January', 'February', 'March', 'April', 'May', 'June', 'July',\n",
    "                                                    'August', 'September', 'October', 'November', 'December'))\n",
    "        self.second_combobox.configure(state=\"disabled\")\n",
    "\n",
    "        # third combobox:\n",
    "        self.third_combobox_var= StringVar()\n",
    "        self.third_combobox_label = ttk.Label(self.frame_2_tab_1, text=\"some duration\")\n",
    "        self.third_combobox = ttk.Combobox(self.frame_2_tab_1,\n",
    "                                                        textvariable=\"some duration\")\n",
    "        self.third_combobox.grid(row=4, column=1, padx=(5, 0), pady=(5, 5), sticky=W)\n",
    "        self.third_combobox_label.grid(row=4, column=0, padx=(5, 0), pady=(5, 5), sticky=W)\n",
    "        self.third_combobox.config(\n",
    "            values=('', '1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12'))\n",
    "        self.third_combobox.configure(state=\"disabled\")\n",
    "\n",
    "        # -------------------------------------------------------------------------------------------------------------\n",
    "        # Import and Export tab:\n",
    "        # -------------------------------------------------------------------------------------------------------------\n",
    "        # Number of scenarios spinbox:\n",
    "        self.number_of_scenarios = StringVar()\n",
    "        Spinbox(self.frame_2_tab_2, from_=1, to=15, textvariable=self.number_of_scenarios).grid(row=1,\n",
    "                                                                                                           column=0,\n",
    "                                                                                                           padx=(\n",
    "                                                                                                               20, 20),\n",
    "                                                                                                           pady=(0, 0),\n",
    "                                                                                                           sticky=W)\n",
    "        self.number_of_scenarios_label = ttk.Label(self.frame_2_tab_2, text=\"Select number of scenarios\")\n",
    "        self.number_of_scenarios_label.grid(row=0, column=0, padx=(20, 20), pady=(0, 0), sticky=W)\n",
    "\n",
    "        # Select scenarios:\n",
    "        ttk.Button(self.frame_2_tab_2, text='New window 1',\n",
    "                   command=self.print_something).grid(\n",
    "            row=0, column=1, padx=(100, 20), pady=(5, 10), sticky=W)\n",
    "\n",
    "        ttk.Button(self.frame_2_tab_2, text='New window 2',\n",
    "                   command=self.print_something).grid(\n",
    "            row=1, column=1, padx=(100, 5), pady=(10, 5), sticky=W)\n",
    "\n",
    "        # progress bar:\n",
    "        progressbar = ttk.Progressbar(self.frame_4_tab_1, orient=HORIZONTAL, length=200)\n",
    "        progressbar.grid(row=0, column=1, padx=(5, 0), pady=(5, 5), sticky=W)\n",
    "\n",
    "        progressbar.config(mode='indeterminate')\n",
    "        progressbar.start()\n",
    "\n",
    "        # progress bar:\n",
    "        progressbar = ttk.Progressbar(self.frame_4_tab_2, orient=HORIZONTAL, length=200)\n",
    "        progressbar.grid(row=0, column=1, padx=(5, 0), pady=(5, 5), sticky=W)\n",
    "\n",
    "        progressbar.config(mode='indeterminate')\n",
    "        progressbar.start()\n",
    "\n",
    "        # Run the model button 1:\n",
    "        ttk.Button(self.frame_4_tab_1, text='Run something', command=self.print_something).grid(\n",
    "            row=0, column=0, padx=(20, 20), pady=(20, 20))\n",
    "\n",
    "        # Run the model button 2:\n",
    "        ttk.Button(self.frame_4_tab_2, text='Run something', command=self.print_something).grid(\n",
    "            row=0, column=0, padx=(20, 20), pady=(20, 20))\n",
    "\n",
    "    # -----------------------------------------------------------------------------------------------------------------\n",
    "    # Add menu line:\n",
    "    # -----------------------------------------------------------------------------------------------------------------\n",
    "    def add_menu_line(self):\n",
    "        self.main_window.option_add('*tearOff', False)\n",
    "        menubar = Menu(self.main_window)\n",
    "        self.main_window.config(menu=menubar)\n",
    "        file = Menu(menubar)\n",
    "        edit = Menu(menubar)\n",
    "        help_ = Menu(menubar)\n",
    "        menubar.add_cascade(menu=file, label='File')\n",
    "        menubar.add_cascade(menu=edit, label='Edit')\n",
    "        menubar.add_cascade(menu=help_, label='Help')\n",
    "\n",
    "    # -----------------------------------------------------------------------------------------------------------------\n",
    "    # Add new windows\n",
    "    # -----------------------------------------------------------------------------------------------------------------\n",
    "    # separate window for loading the database:\n",
    "    def new_window(self):\n",
    "        self.new_window = Toplevel(self.main_window)\n",
    "        self.new_window.title('Load something important')\n",
    "        self.new_window.lift(self.main_window)\n",
    "\n",
    "        # to make sure other copies of the window not to open:\n",
    "        self.new_window.focus_set()  # sets the focus to the main menu window\n",
    "        self.new_window.grab_set()  # prohibits any other window to accept events\n",
    "\n",
    "        self.new_window_frame = ttk.LabelFrame(self.new_window, text='Select something important: ',\n",
    "                                                         height=200, width=400)\n",
    "        self.new_window_frame.grid(row=0, column=0, sticky=W)\n",
    "        self.new_window_frame.grid_propagate(False)\n",
    "\n",
    "        ttk.Radiobutton(self.new_window_frame, text='bla bla bla',\n",
    "                        variable='bla bla bla', value='bla bla bla').grid(row=0, column=0, padx=(30, 10), pady=(20, 10), sticky='w')\n",
    "\n",
    "        ttk.Radiobutton(self.new_window_frame, text='bla bla bla',\n",
    "                        variable='bla bla bla', value='bla bla bla',\n",
    "                        command=self.print_something).grid(row=1, column=0, padx=(30, 10), pady=(10, 20), sticky='w')\n",
    "\n",
    "\n",
    "    @staticmethod\n",
    "    def print_something():\n",
    "        print('You pressed something!')\n",
    "\n",
    "\n",
    "\n",
    "def main():\n",
    "    root = Tk()\n",
    "    sse = SimpleGUI(root)\n",
    "    root.mainloop()\n",
    "\n",
    "\n",
    "if __name__ == '__main__':\n",
    "    main()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.5.2"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 0
}
